###########################
variables
###########################

dynamically typed language : dont have to declare the type at all
n = 0
n = 'abc'
types are determined at run time
multiple assignments are allowed
n, m = 0, 'abc'

n += 1
n = n + 1
but n++ not allowed

null is called None in python

###########################
if statements
###########################
if
elif
else
parentheses not required for single line conditionals but multi line conditionals do require it

###########################
math
###########################
decimal division by default whereas most languages have integer division
5/2 -> 2.5
// rounds down
5//2 -> 2
work around for rounding numbers towards 0 use decimal division and convert to int
int(-3/2)
modulo has same issue with -ve numbers
-10%3 -> should be 1 but is 2
import math
math.fmod(-10, 3)
floor to round down math.floor(3/2)
ceil to round up math.ceil(3/2)

# if we need max integer
float('inf')
# if we need min integer
float('-inf')

###########################
arrays
###########################
python lists are dynmaic so can be used as stack
insert is O(n)
but appending, popping, accessing index is constant time
arr = [1] * 5
#unpacking
a, b, c = [1, 2, 3]

for i, n in enumerate(nums):
    print(i, n)

#loop through multiple arrays simulatneously
nums1 = [1, 3, 5]
nums2 = [2, 4, 6]

for n1, n2 in zip(nums1, nums2):
    print(n1, n2)

nums.reverse()
nums.sort()
nums.sort(reverse = True)

#implement custom sort (sort by length on this case)
arr.sort(key=lambda x: len(x))


###########################
list comprehension
###########################
arr = [i for i in range(5)]
arr = [i+i for i in range(5)]

#create 2D list
arr = [[0] * 4 for i in range(4)]

###########################
strings
###########################
they are immutable
if you need ASCII value of a char use ord
print(ord('a'))

strings = ['ab', 'cd', 'ef']
print(''.join(strings))

###########################
queues
###########################
from collections import deque

queue = deque()
queue.append(1)
queue.append(2)
queue.popleft() # this is constant time operation
queue.appendleft(1)
queue.pop()

###########################
hashset
###########################
# can search, remove and insert value in constant time
# cannot have duplicate items
mySet = set()
mySet.add(1)
mySet.add(2)

# can search easily using in keyword
print(1 in mySet)
mySet.remove(2)
#set comprehension
mySet = {i for i in range(5)}

###########################
hashmap
###########################
# cannot have duplicate keys
# search for key in constant time
print('alice' in myMap)
myMap.pop('alice')
myMap = {i: 2*i for i in range(3)}

for key in myMap:
    print(key, myMap[key])

for val in myMap.values():
    print(val)

for key, val in myMap.items():
    print(key, val)

###########################
tuples
###########################
# they are immutable
tup = (1, 2, 3)
# tuple can be used a hashable keys
myMap = {(1, 2) : 3}
# lists are not hashable and cannot be used as keys for hashmap

###########################
heaps
###########################
#useful ds to find min and max of a set of values frequently
#by default heaps are min heaps
import heapq
minHeap = []
heapq.heappush(minHeap, 3)
heapq.heappush(minHeap, 2)
heapq.heappush(minHeap, 4)
#min value always at index 0
print(minHeap[0])

while len(minHeap):
    print(heapq.heappop(minHeap))

# python does not have max heap workaround is to multiply every element by -1
# again multiply by -1 while popping

if already have a list
arr = [2, 1, 5, 8]
heapq.heapify(arr)
while arr:
    print(heapq.heappop(arr))

###########################
nested functions
###########################
def outer(a, b):
    c = 'c'

    def inner():
        return a + b + c
    
    return inner()

# can modify objects but cannot reassign value unless using nonlocal keyword
def double(arr, val):
    def helper():
        #Modifying array works
        for i, n in enumerate(arr):
            arr[i] *= 2
        
        # will only modify val in helper scope
        # val *= 2

        # this will modify val outside helper scope
        nonlocal val
        val *= 2

    helper()
    print(arr, val)

# class and objects

class MyClass:
    def __init__(self, nums):
        self.nums = nums
        self.size = len(nums)

    def getLength(self):
        return self.size

    def getDoubleLength(self):
        return 2 * self.getLength()